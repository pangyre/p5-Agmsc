#!/usr/bin/env perl
use warnings;
use strict;
use WWW::Mechanize;

my $agent = WWW::Mechanize->new;
my $agmsc = Agmsc->new({ root => "http://sedition.com",
                         agent => $agent }); # Profile def ? DB


$agmsc->add_to_queue($agmsc->root);
# Initialize step.



while ( my $link = $agmsc->next_link )
{
    die $link;
}


exit 0;

#  Subroutines
#---------------------------------------------------------------------

BEGIN {
    package Agmsc;
    use Moose;
    use namespace::autoclean;
    our $VERSION = "0.01";
    use URI;
    use HTTP::Response;

    use Moose::Util::TypeConstraints;

    subtype "Agmsc::LinkType" => as class_type('Agmsc::Link');

    coerce "Agmsc::LinkType"
        => from "Str"
        => via { Agmsc::Link->new({ uri => URI->new($_) }) }
#        => from "Object"
#        => via { $_->isa("HTTP::Response") ?
#                 { $_->
#        }
        ;


    no Moose::Util::TypeConstraints;

    has "root" =>
        is => "ro",
        isa => "Agmsc::LinkType",
        coerce => 1,
        # isa => "ArrayRef[URI]",
        required => 1,
        #auto_deref => 1,
        ;

#    after "root" => sub {
#        my $self = shift;
#        $self->add_to_queue($self->root);
#    };

    has "exclude" =>
        is => "rw",
        isa => "RegexpRef", # ArrayRef[URI]
        ;

    has "include" =>
        is => "rw",
        isa => "RegexpRef", # ArrayRef[Agmsc::Inclusion]
        ;

    has "links" =>
        is => "rw",
        isa => "ArrayRef[Agmsc::Link]",
        auto_deref => 1,
        ;

    has "queue" =>
        traits => [ "Array" ],
        is => "rw",
        isa => "ArrayRef[Agmsc::Link]",
        auto_deref => 1,
        lazy => 1,
        default => sub { [] },
        handles => {
            next_link => "shift",
            add_to_queue => "push",
        }
        ;

    __PACKAGE__->meta->make_immutable();


    package Agmsc::Link;
    use Moose;
    use namespace::autoclean;
#?    use URI;

    has "uri" =>
        is => "ro",
        isa => "URI",
        required => 1,
        handles => [qw/
            protocol
        /]
        ;

    has "headers" =>
        is => "ro",
        # isa => "ArrayRef[HTTP::Headers]", # keep history?
        isa => "HTTP::Headers",
        # required => 1,
        ;

    has "status" =>
        is => "ro",
        isa => "Int",
        # required => 1,
        ;

    has "links" =>
        is => "rw",
        isa => "ArrayRef[Agmsc::Link]",
        auto_deref => 1,
        ;

    has "parents" =>
        is => "rw",
        isa => "ArrayRef[Agmsc::Link]",
        auto_deref => 1,
        weak_ref => 1,
        ;

    # Role for this stuff?

    use HTTP::Date;
    use DateTime;

    sub resident {
        my $self = shift;
    }

    sub content_type {
        +shift->headers->header("Content-Type");
    }

    sub content_length {
        +shift->headers->header("Content-Length");
    }

    sub last_modified {
        my $time = str2time( +shift->headers->header("Last-Modified") );
        DateTime->from_epoch( epoch => $time );
    }

    sub expires {
        my $time = str2time( +shift->headers->header("Expires") );
        DateTime->from_epoch( epoch => $time );
    }


    __PACKAGE__->meta->make_immutable();

}

__DATA__

 
